//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationService.ApplicationService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApplicationServiceSoap", Namespace="dse.webservices")]
    public partial class ApplicationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback applyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeDeliveredOperationCompleted;
        
        /// CodeRemarks
        public ApplicationService() {
            this.Url = "http://127.0.0.1:8060/ApplicationService.asmx";
        }
        
        public ApplicationService(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event applyCompletedEventHandler applyCompleted;
        
        /// CodeRemarks
        public event getApplicationsCompletedEventHandler getApplicationsCompleted;
        
        /// CodeRemarks
        public event makeDeliveredCompletedEventHandler makeDeliveredCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("dse.webservices/apply", RequestNamespace="dse.webservices", ResponseNamespace="dse.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long apply(string regNum, string transacNum, int degreeId, string email) {
            object[] results = this.Invoke("apply", new object[] {
                        regNum,
                        transacNum,
                        degreeId,
                        email});
            return ((long)(results[0]));
        }
        
        /// CodeRemarks
        public void applyAsync(string regNum, string transacNum, int degreeId, string email) {
            this.applyAsync(regNum, transacNum, degreeId, email, null);
        }
        
        /// CodeRemarks
        public void applyAsync(string regNum, string transacNum, int degreeId, string email, object userState) {
            if ((this.applyOperationCompleted == null)) {
                this.applyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyOperationCompleted);
            }
            this.InvokeAsync("apply", new object[] {
                        regNum,
                        transacNum,
                        degreeId,
                        email}, this.applyOperationCompleted, userState);
        }
        
        private void OnapplyOperationCompleted(object arg) {
            if ((this.applyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyCompleted(this, new applyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("dse.webservices/getApplications", RequestNamespace="dse.webservices", ResponseNamespace="dse.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Application[] getApplications() {
            object[] results = this.Invoke("getApplications", new object[0]);
            return ((Application[])(results[0]));
        }
        
        /// CodeRemarks
        public void getApplicationsAsync() {
            this.getApplicationsAsync(null);
        }
        
        /// CodeRemarks
        public void getApplicationsAsync(object userState) {
            if ((this.getApplicationsOperationCompleted == null)) {
                this.getApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetApplicationsOperationCompleted);
            }
            this.InvokeAsync("getApplications", new object[0], this.getApplicationsOperationCompleted, userState);
        }
        
        private void OngetApplicationsOperationCompleted(object arg) {
            if ((this.getApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getApplicationsCompleted(this, new getApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("dse.webservices/makeDelivered", RequestNamespace="dse.webservices", ResponseNamespace="dse.webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void makeDelivered(int appId) {
            this.Invoke("makeDelivered", new object[] {
                        appId});
        }
        
        /// CodeRemarks
        public void makeDeliveredAsync(int appId) {
            this.makeDeliveredAsync(appId, null);
        }
        
        /// CodeRemarks
        public void makeDeliveredAsync(int appId, object userState) {
            if ((this.makeDeliveredOperationCompleted == null)) {
                this.makeDeliveredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeDeliveredOperationCompleted);
            }
            this.InvokeAsync("makeDelivered", new object[] {
                        appId}, this.makeDeliveredOperationCompleted, userState);
        }
        
        private void OnmakeDeliveredOperationCompleted(object arg) {
            if ((this.makeDeliveredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeDeliveredCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="dse.webservices")]
    public partial class Application {
        
        /// <remarks/>
        public int id;
        
        /// <remarks/>
        public string regNum;
        
        /// <remarks/>
        public int degreeId;
        
        /// <remarks/>
        public string email;
        
        /// <remarks/>
        public string date;
        
        /// <remarks/>
        public bool approved;
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void applyCompletedEventHandler(object sender, applyCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void getApplicationsCompletedEventHandler(object sender, getApplicationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public Application[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Application[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MonoDevelop", "2.6.0.0")]
    public delegate void makeDeliveredCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
